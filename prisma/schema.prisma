// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  role     Role   @default(user)
  name     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]

  @@map("users")
}

enum Role {
  super_admin
  admin
  user
}

model Service {
  id          String  @id @default(uuid())
  image       String
  title       String
  description String?
  price       Float
  isAvailable Boolean @default(false)

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]

  @@map("services")
}

enum OrderStatus {
  pending
  accepted
  rejected
  completed
}

model Order {
  id          String      @id @default(uuid())
  orderNumber String      @unique
  status      OrderStatus @default(pending)

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  total Float
  paid  Boolean @default(false)

  orderItems    OrderItem[]
  payment       Payment?
  pickupDetails PickupDetails?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@map("orders")
}

model OrderItem {
  id String @id @default(uuid())

  quantity Int
  price    Float
  name     String

  service    Service? @relation(fields: [service_id], references: [id], onDelete: SetNull)
  service_id String?

  order    Order  @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id String

  @@map("order_items")
}

model Payment {
  id String @id @default(uuid())

  order    Order  @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id String @unique

  amount         Float
  is_paid        Boolean @default(false)
  method         String?
  transaction_id String?

  @@map("payments")
}

model PickupDetails {
  id String @id @default(uuid())

  order    Order  @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id String @unique

  first_name String
  last_name  String
  phone      String
  email      String
  address1   String
  address2   String?

  date String
  time String

  note String?

  @@map("pickup_details")
}
