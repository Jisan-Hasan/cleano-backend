// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid())
  email        String  @unique
  password     String
  role         Role    @default(user)
  firstName    String
  lastName     String?
  contractNo   String?
  houseNo      String?
  street       String?
  city         String?
  landmark     String?
  profileImage String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]
  reviews  Review[]

  @@map("users")
}

enum Role {
  super_admin
  admin
  user
}

model Category {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  services Service[]

  @@map("categories")
}

model Service {
  id           String  @id @default(uuid())
  name         String
  description  String
  price        Float
  availability Boolean @default(false)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]
  reviews  Review[]

  @@map("services")
}

model Booking {
  id         String        @id @default(uuid())
  status     BookingStatus @default(pending)
  date       DateTime
  contractNo String
  houseNo    String
  street     String
  city       String
  landmark   String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}

enum BookingStatus {
  pending
  confirmed
  completed
  cancelled
}

model Review {
  id      String @id @default(uuid())
  comment String
  rating  Int

  userId String
  user   User   @relation(fields: [userId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model FAQ {
  id       String @id @default(uuid())
  question String
  answer   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}
